guides(fill=guide_legend(title="Mechanical Ventilation")) +
scale_fill_manual(labels = labels_legend,
values = c('ghostwhite', 'mediumvioletred'))+
scale_x_discrete(labels = c('COVID', 'NON-COVID')) +
annotate(geom = 'text', x = 1, y = y_annot + 5,
label = paste('Covid positive: N = ', n_covid_pos),
color = 'black')+
annotate(geom = 'text', x = 2, y = y_annot + 5,
label = paste('Covid negative: N = ', n_covid_neg),
color = 'black')
print(box)
} return(c(hist, scatter, box))
plots <- function(df, genes_list, cont_cov, cat_cov) {
#filter dataframe (received error message indicating to use "all of")
df_filtered <- df %>% dplyr::select(participant_id,
all_of(genes_list),
all_of(cont_cov),
all_of(cat_cov))
#cast to long
df_filtered_long <- df_filtered %>% tidyr::pivot_longer(cols = genes_list,
names_to = 'Gene',
values_to = 'Expression')
for (gene in genes_list){ #for gene in genes list
one_gene <- df_filtered_long %>% dplyr::filter(Gene == gene) #get dataframe for one gene
one_gene$Expression <- as.numeric(na.omit(one_gene$Expression))
#get data for plotting, need mean, sd, and the 75th quantile for positioning annotation box
mean_expression <- round(mean(one_gene$Expression), 2)
sd_expression <- round(sd(one_gene$Expression), 2)
x_min_box <- quantile(one_gene$Expression, 3/4)
n <- length(one_gene$Expression)
#create labels
hist_title <- paste('Distribution of ', gene, ' expression across samples')
hist_x <- paste(gene, ' Expression')
#plot histogram using theme parameters from previous assignment
hist <- one_gene %>% ggplot(aes(Expression)) +
geom_histogram(bins = 30, fill = 'slateblue1') +
theme_minimal() +
theme(plot.title = element_text(hjust = .4)) +
labs(title = hist_title,
x = hist_x,
y = 'Frequency') +
scale_color_manual(values = c('slateblue1')) +
annotate('rect',
xmin = x_min_box + 5,
xmax = x_min_box + 25,
ymin = 10,
ymax = 14, fill = 'grey', alpha = .9)+
annotate(geom = 'text', x = x_min_box + 15, y = 12, label = paste('N:', n,' samples',
'\n Mean Expression:', mean_expression,
'\nsd:', sd_expression), size = 2.5)
#print to display the histogram
print(hist)
#filter the data to create the scatter plot
#to avoid warnings of coerced NAs and to ensure cont_cov is numeric
scatter_filtered <- one_gene %>% filter(one_gene[[cont_cov]] != ' unknown')
scatter_filtered[cont_cov] <- as.numeric(scatter_filtered[[cont_cov]])
#assign the levels for crp
if (cont_cov == 'crp.mg.l.') {
scatter_filtered$crp.level <- cut(scatter_filtered$crp.mg.l.,
breaks = c(0, 3, 10, 100, 500000),
labels = c('normal', 'moderate', 'high', 'severe'))
}
#set color palette and titles
colorPalette_scatter <- c('azure4', 'skyblue2', 'slateblue2', 'midnightblue')
x_scatter_split <- strsplit(x = cont_cov, split = '\\.')[[1]][1]
x_scatter <- paste(toupper(x_scatter_split), '(mg/L)')
title_scatter <- paste(x_scatter, ' vs ', gene, ' Expression')
y_scatter <- paste(gene, ' Expression')
#create scatterplot with parameters from previous assignment
scatter <- scatter_filtered %>% ggplot(aes(x = .data[[cont_cov]],
y = Expression,
color = crp.level)) +
geom_point(na.rm = TRUE) +
theme(
axis.text.x = element_text(angle=90),
plot.title = element_text(hjust = .4),
legend.position = c(.85,.75)) +
labs(title = title_scatter, x = x_scatter, y = y_scatter)  +
scale_color_manual(labels =
c('Normal (<3mg/L)', 'Moderate (3-10mg/L)',
'High (10 -100mg/L)', 'Severe (>100mg/L)'),
values = colorPalette_scatter)
#print scatterplot
print(scatter)
#create titles for box plot
title_box <- paste(gene, ' Expression across Disease Status and Mechanical Ventilation')
x_lab_box <- 'Disease Status'
y_lab_box  <- paste(gene, ' Expression')
#get num_covid positive and negative for annotations
n_covid_pos <- length(dplyr::filter(
one_gene, disease_status == 'disease state: COVID-19')$Expression)
n_covid_neg <- length(dplyr::filter(
one_gene, disease_status != 'disease state: COVID-19')$Expression)
#set the y value for the annotations as the max of expression so that it will not cover the data
y_annot <- max(one_gene$Expression)
labels_legend <- c('no mechanical ventilation', 'mechanical ventilation')
#generate box plot using same parameters as previous assignment
box_filtered <- one_gene %>% dplyr::filter(one_gene[[cat_cov[2]]] != ' unknown')
box <- box_filtered %>% ggplot(aes_string(x = cat_cov[1], y = 'Expression', fill = cat_cov[2])) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = 'bottom') +
labs(title = title_box,
x = x_lab_box,
y = y_lab_box,
colour = 'Mechanical Ventilation') +
guides(fill=guide_legend(title="Mechanical Ventilation")) +
scale_fill_manual(labels = labels_legend,
values = c('ghostwhite', 'mediumvioletred'))+
scale_x_discrete(labels = c('COVID', 'NON-COVID')) +
annotate(geom = 'text', x = 1, y = y_annot + 5,
label = paste('Covid positive: N = ', n_covid_pos),
color = 'black')+
annotate(geom = 'text', x = 2, y = y_annot + 5,
label = paste('Covid negative: N = ', n_covid_neg),
color = 'black')
print(box)
}return(c(hist, scatter, box))
plots <- function(df, genes_list, cont_cov, cat_cov) {
#filter dataframe (received error message indicating to use "all of")
df_filtered <- df %>% dplyr::select(participant_id,
all_of(genes_list),
all_of(cont_cov),
all_of(cat_cov))
#cast to long
df_filtered_long <- df_filtered %>% tidyr::pivot_longer(cols = genes_list,
names_to = 'Gene',
values_to = 'Expression')
for (gene in genes_list){ #for gene in genes list
one_gene <- df_filtered_long %>% dplyr::filter(Gene == gene) #get dataframe for one gene
one_gene$Expression <- as.numeric(na.omit(one_gene$Expression))
#get data for plotting, need mean, sd, and the 75th quantile for positioning annotation box
mean_expression <- round(mean(one_gene$Expression), 2)
sd_expression <- round(sd(one_gene$Expression), 2)
x_min_box <- quantile(one_gene$Expression, 3/4)
n <- length(one_gene$Expression)
#create labels
hist_title <- paste('Distribution of ', gene, ' expression across samples')
hist_x <- paste(gene, ' Expression')
#plot histogram using theme parameters from previous assignment
hist <- one_gene %>% ggplot(aes(Expression)) +
geom_histogram(bins = 30, fill = 'slateblue1') +
theme_minimal() +
theme(plot.title = element_text(hjust = .4)) +
labs(title = hist_title,
x = hist_x,
y = 'Frequency') +
scale_color_manual(values = c('slateblue1')) +
annotate('rect',
xmin = x_min_box + 5,
xmax = x_min_box + 25,
ymin = 10,
ymax = 14, fill = 'grey', alpha = .9)+
annotate(geom = 'text', x = x_min_box + 15, y = 12, label = paste('N:', n,' samples',
'\n Mean Expression:', mean_expression,
'\nsd:', sd_expression), size = 2.5)
#print to display the histogram
print(hist)
#filter the data to create the scatter plot
#to avoid warnings of coerced NAs and to ensure cont_cov is numeric
scatter_filtered <- one_gene %>% filter(one_gene[[cont_cov]] != ' unknown')
scatter_filtered[cont_cov] <- as.numeric(scatter_filtered[[cont_cov]])
#assign the levels for crp
if (cont_cov == 'crp.mg.l.') {
scatter_filtered$crp.level <- cut(scatter_filtered$crp.mg.l.,
breaks = c(0, 3, 10, 100, 500000),
labels = c('normal', 'moderate', 'high', 'severe'))
}
#set color palette and titles
colorPalette_scatter <- c('azure4', 'skyblue2', 'slateblue2', 'midnightblue')
x_scatter_split <- strsplit(x = cont_cov, split = '\\.')[[1]][1]
x_scatter <- paste(toupper(x_scatter_split), '(mg/L)')
title_scatter <- paste(x_scatter, ' vs ', gene, ' Expression')
y_scatter <- paste(gene, ' Expression')
#create scatterplot with parameters from previous assignment
scatter <- scatter_filtered %>% ggplot(aes(x = .data[[cont_cov]],
y = Expression,
color = crp.level)) +
geom_point(na.rm = TRUE) +
theme(
axis.text.x = element_text(angle=90),
plot.title = element_text(hjust = .4),
legend.position = c(.85,.75)) +
labs(title = title_scatter, x = x_scatter, y = y_scatter)  +
scale_color_manual(labels =
c('Normal (<3mg/L)', 'Moderate (3-10mg/L)',
'High (10 -100mg/L)', 'Severe (>100mg/L)'),
values = colorPalette_scatter)
#print scatterplot
print(scatter)
#create titles for box plot
title_box <- paste(gene, ' Expression across Disease Status and Mechanical Ventilation')
x_lab_box <- 'Disease Status'
y_lab_box  <- paste(gene, ' Expression')
#get num_covid positive and negative for annotations
n_covid_pos <- length(dplyr::filter(
one_gene, disease_status == 'disease state: COVID-19')$Expression)
n_covid_neg <- length(dplyr::filter(
one_gene, disease_status != 'disease state: COVID-19')$Expression)
#set the y value for the annotations as the max of expression so that it will not cover the data
y_annot <- max(one_gene$Expression)
labels_legend <- c('no mechanical ventilation', 'mechanical ventilation')
#generate box plot using same parameters as previous assignment
box_filtered <- one_gene %>% dplyr::filter(one_gene[[cat_cov[2]]] != ' unknown')
box <- box_filtered %>% ggplot(aes_string(x = cat_cov[1], y = 'Expression', fill = cat_cov[2])) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = 'bottom') +
labs(title = title_box,
x = x_lab_box,
y = y_lab_box,
colour = 'Mechanical Ventilation') +
guides(fill=guide_legend(title="Mechanical Ventilation")) +
scale_fill_manual(labels = labels_legend,
values = c('ghostwhite', 'mediumvioletred'))+
scale_x_discrete(labels = c('COVID', 'NON-COVID')) +
annotate(geom = 'text', x = 1, y = y_annot + 5,
label = paste('Covid positive: N = ', n_covid_pos),
color = 'black')+
annotate(geom = 'text', x = 2, y = y_annot + 5,
label = paste('Covid negative: N = ', n_covid_neg),
color = 'black')
print(box)
}
return(c(hist, scatter, box))
}
#a few warnings about deprecated methods, did not cause
#problems so decided to suppress for final output
hist1, scatter1, box1 <- suppressWarnings({ plots(clean_data, c('ABHD17A'),
#a few warnings about deprecated methods, did not cause
#problems so decided to suppress for final output
c(hist1, scatter1, box1) <- suppressWarnings({ plots(clean_data, c('ABHD17A'),
c('crp.mg.l.'),
c('disease_status', 'mechanical_ventilation')) } )
#a few warnings about deprecated methods, did not cause
#problems so decided to suppress for final output
hist1, scatter1, box1 <- suppressWarnings({ plots(clean_data, c('ABHD17A'),
#a few warnings about deprecated methods, did not cause
#problems so decided to suppress for final output
plots <- suppressWarnings({ plots(clean_data, c('ABHD17A'),
c('crp.mg.l.'),
c('disease_status', 'mechanical_ventilation')) } )
plots
#a few warnings about deprecated methods, did not cause
#problems so decided to suppress for final output
my_plots <- suppressWarnings({ plots(clean_data, c('ABHD17A'),
c('crp.mg.l.'),
c('disease_status', 'mechanical_ventilation')) } )
#a few warnings about deprecated methods, did not cause
#problems so decided to suppress for final output
my_plots <- suppressWarnings({ plots(clean_data, c('ABHD17A'),
c('crp.mg.l.'),
c('disease_status', 'mechanical_ventilation')) } )
plots <- function(df, genes_list, cont_cov, cat_cov) {
#filter dataframe (received error message indicating to use "all of")
df_filtered <- df %>% dplyr::select(participant_id,
all_of(genes_list),
all_of(cont_cov),
all_of(cat_cov))
#cast to long
df_filtered_long <- df_filtered %>% tidyr::pivot_longer(cols = genes_list,
names_to = 'Gene',
values_to = 'Expression')
for (gene in genes_list){ #for gene in genes list
one_gene <- df_filtered_long %>% dplyr::filter(Gene == gene) #get dataframe for one gene
one_gene$Expression <- as.numeric(na.omit(one_gene$Expression))
#get data for plotting, need mean, sd, and the 75th quantile for positioning annotation box
mean_expression <- round(mean(one_gene$Expression), 2)
sd_expression <- round(sd(one_gene$Expression), 2)
x_min_box <- quantile(one_gene$Expression, 3/4)
n <- length(one_gene$Expression)
#create labels
hist_title <- paste('Distribution of ', gene, ' expression across samples')
hist_x <- paste(gene, ' Expression')
#plot histogram using theme parameters from previous assignment
hist <- one_gene %>% ggplot(aes(Expression)) +
geom_histogram(bins = 30, fill = 'slateblue1') +
theme_minimal() +
theme(plot.title = element_text(hjust = .4)) +
labs(title = hist_title,
x = hist_x,
y = 'Frequency') +
scale_color_manual(values = c('slateblue1')) +
annotate('rect',
xmin = x_min_box + 5,
xmax = x_min_box + 25,
ymin = 10,
ymax = 14, fill = 'grey', alpha = .9)+
annotate(geom = 'text', x = x_min_box + 15, y = 12, label = paste('N:', n,' samples',
'\n Mean Expression:', mean_expression,
'\nsd:', sd_expression), size = 2.5)
#print to display the histogram
print(hist)
#filter the data to create the scatter plot
#to avoid warnings of coerced NAs and to ensure cont_cov is numeric
scatter_filtered <- one_gene %>% filter(one_gene[[cont_cov]] != ' unknown')
scatter_filtered[cont_cov] <- as.numeric(scatter_filtered[[cont_cov]])
#assign the levels for crp
if (cont_cov == 'crp.mg.l.') {
scatter_filtered$crp.level <- cut(scatter_filtered$crp.mg.l.,
breaks = c(0, 3, 10, 100, 500000),
labels = c('normal', 'moderate', 'high', 'severe'))
}
#set color palette and titles
colorPalette_scatter <- c('azure4', 'skyblue2', 'slateblue2', 'midnightblue')
x_scatter_split <- strsplit(x = cont_cov, split = '\\.')[[1]][1]
x_scatter <- paste(toupper(x_scatter_split), '(mg/L)')
title_scatter <- paste(x_scatter, ' vs ', gene, ' Expression')
y_scatter <- paste(gene, ' Expression')
#create scatterplot with parameters from previous assignment
scatter <- scatter_filtered %>% ggplot(aes(x = .data[[cont_cov]],
y = Expression,
color = crp.level)) +
geom_point(na.rm = TRUE) +
theme(
axis.text.x = element_text(angle=90),
plot.title = element_text(hjust = .4),
legend.position = c(.85,.75)) +
labs(title = title_scatter, x = x_scatter, y = y_scatter)  +
scale_color_manual(labels =
c('Normal (<3mg/L)', 'Moderate (3-10mg/L)',
'High (10 -100mg/L)', 'Severe (>100mg/L)'),
values = colorPalette_scatter)
#print scatterplot
print(scatter)
#create titles for box plot
title_box <- paste(gene, ' Expression across Disease Status and Mechanical Ventilation')
x_lab_box <- 'Disease Status'
y_lab_box  <- paste(gene, ' Expression')
#get num_covid positive and negative for annotations
n_covid_pos <- length(dplyr::filter(
one_gene, disease_status == 'disease state: COVID-19')$Expression)
n_covid_neg <- length(dplyr::filter(
one_gene, disease_status != 'disease state: COVID-19')$Expression)
#set the y value for the annotations as the max of expression so that it will not cover the data
y_annot <- max(one_gene$Expression)
labels_legend <- c('no mechanical ventilation', 'mechanical ventilation')
#generate box plot using same parameters as previous assignment
box_filtered <- one_gene %>% dplyr::filter(one_gene[[cat_cov[2]]] != ' unknown')
box <- box_filtered %>% ggplot(aes_string(x = cat_cov[1], y = 'Expression', fill = cat_cov[2])) +
geom_boxplot() +
theme_minimal() +
theme(legend.position = 'bottom') +
labs(title = title_box,
x = x_lab_box,
y = y_lab_box,
colour = 'Mechanical Ventilation') +
guides(fill=guide_legend(title="Mechanical Ventilation")) +
scale_fill_manual(labels = labels_legend,
values = c('ghostwhite', 'mediumvioletred'))+
scale_x_discrete(labels = c('COVID', 'NON-COVID')) +
annotate(geom = 'text', x = 1, y = y_annot + 5,
label = paste('Covid positive: N = ', n_covid_pos),
color = 'black')+
annotate(geom = 'text', x = 2, y = y_annot + 5,
label = paste('Covid negative: N = ', n_covid_neg),
color = 'black')
print(box)
}
return(c(hist, scatter, box))
}
#a few warnings about deprecated methods, did not cause
#problems so decided to suppress for final output
my_plots <- suppressWarnings({ plots(clean_data, c('ABHD17A'),
c('crp.mg.l.'),
c('disease_status', 'mechanical_ventilation')) } )
my_plots[1]
ggarrange(my_plots[1], my_plots[2])
#plot diverging
#inspired by: https://www.tutorialspoint.com/ggplot2/ggplot2_diverging_charts.htm
plot_diverging <- function(df, gene1) {
#select gene of interest and ensure numeric
plotting_df <- df %>%
dplyr::select(all_of(gene1))
plotting_df$my_gene <- as.numeric(df[[gene1]])
#create a participant column
plotting_df$participant <- seq(1:length(plotting_df$my_gene))
#add disease status col to plotting df as factor
plotting_df$disease_status <- factor(df$disease_status,
levels = unique(df$disease_status))
#add z-score column
plotting_df <- plotting_df %>%
dplyr::mutate(z = (my_gene - mean(my_gene))/sd(my_gene)) %>%
dplyr::arrange(z)
#factor participants to maintain order
plotting_df$participant <- factor(plotting_df$participant,
levels = unique(plotting_df$participant))
#plot final by participant and z score
final_plot <-
ggplot(plotting_df, aes(x = participant, y = z, label = z)) +
geom_bar(stat='identity', aes(fill = disease_status), width = .9) +
scale_fill_manual(name = 'Disease State',
labels = c('COVID-19', 'NON-COVID-19'),
values = c("disease state: COVID-19"="plum2", "disease state: non-COVID-19"="limegreen")) +
labs(title= paste("Z-scored Expression for", gene1),
y = 'Z-scored expression',
x = 'Participant') +
theme(axis.text.y = element_blank()) +
coord_flip()
return(final_plot)
}
#create 4 plots and plot together
a <- plot_diverging(clean_data, 'ABI1')
b <- plot_diverging(clean_data, 'ABHD3')
c <- plot_diverging(clean_data, 'ABHD17A')
d <- plot_diverging(clean_data, 'AAMP')
ggpubr::ggarrange(a,b,c,d, common.legend = T)
#create 4 plots and plot together
a <- plot_diverging(clean_data, 'ABI1')
b <- plot_diverging(clean_data, 'ABHD3')
c <- plot_diverging(clean_data, 'ABHD17A')
d <- plot_diverging(clean_data, 'AAMP')
ggpubr::ggarrange(a,b,c,d, common.legend = T, top = 'Z-Scored Expression')
#create 4 plots and plot together
a <- plot_diverging(clean_data, 'ABI1')
b <- plot_diverging(clean_data, 'ABHD3')
c <- plot_diverging(clean_data, 'ABHD17A')
d <- plot_diverging(clean_data, 'AAMP')
ggpubr::ggarrange(a,b,c,d, common.legend = T)
#create 4 plots and plot together
a <- plot_diverging(clean_data, 'ABI1')
b <- plot_diverging(clean_data, 'ABHD3')
c <- plot_diverging(clean_data, 'ABHD17A')
d <- plot_diverging(clean_data, 'AAMP')
p<- ggpubr::ggarrange(a,b,c,d, common.legend = T)
annotate_figure(p, top = 'hi', size = 14)
annotate_figure(p, top = 'hi')
#plot diverging
#inspired by: https://www.tutorialspoint.com/ggplot2/ggplot2_diverging_charts.htm
plot_diverging <- function(df, gene1) {
#select gene of interest and ensure numeric
plotting_df <- df %>%
dplyr::select(all_of(gene1))
plotting_df$my_gene <- as.numeric(df[[gene1]])
#create a participant column
plotting_df$participant <- seq(1:length(plotting_df$my_gene))
#add disease status col to plotting df as factor
plotting_df$disease_status <- factor(df$disease_status,
levels = unique(df$disease_status))
#add z-score column
plotting_df <- plotting_df %>%
dplyr::mutate(z = (my_gene - mean(my_gene))/sd(my_gene)) %>%
dplyr::arrange(z)
#factor participants to maintain order
plotting_df$participant <- factor(plotting_df$participant,
levels = unique(plotting_df$participant))
#plot final by participant and z score
final_plot <-
ggplot(plotting_df, aes(x = participant, y = z, label = z)) +
geom_bar(stat='identity', aes(fill = disease_status), width = .9) +
scale_fill_manual(name = 'Disease State',
labels = c('COVID-19', 'NON-COVID-19'),
values = c("disease state: COVID-19"="plum2", "disease state: non-COVID-19"="limegreen")) +
labs(title= gene1, #paste("Z-scored Expression for", gene1),
y = 'Z-scored expression',
x = 'Participant') +
theme(axis.text.y = element_blank()) +
coord_flip()
return(final_plot)
}
#create 4 plots and plot together
a <- plot_diverging(clean_data, 'ABI1')
b <- plot_diverging(clean_data, 'ABHD3')
c <- plot_diverging(clean_data, 'ABHD17A')
d <- plot_diverging(clean_data, 'AAMP')
p<- ggpubr::ggarrange(a,b,c,d, common.legend = T)
annotate_figure(p, top = 'hi')
#create 4 plots and plot together
a <- plot_diverging(clean_data, 'ABI1')
b <- plot_diverging(clean_data, 'ABHD3')
c <- plot_diverging(clean_data, 'ABHD17A')
d <- plot_diverging(clean_data, 'AAMP')
ggpubr::ggarrange(a,b,c,d, common.legend = T)
#plot diverging
#inspired by: https://www.tutorialspoint.com/ggplot2/ggplot2_diverging_charts.htm
plot_diverging <- function(df, gene1) {
#select gene of interest and ensure numeric
plotting_df <- df %>%
dplyr::select(all_of(gene1))
plotting_df$my_gene <- as.numeric(df[[gene1]])
#create a participant column
plotting_df$participant <- seq(1:length(plotting_df$my_gene))
#add disease status col to plotting df as factor
plotting_df$disease_status <- factor(df$disease_status,
levels = unique(df$disease_status))
#add z-score column
plotting_df <- plotting_df %>%
dplyr::mutate(z = (my_gene - mean(my_gene))/sd(my_gene)) %>%
dplyr::arrange(z)
#factor participants to maintain order
plotting_df$participant <- factor(plotting_df$participant,
levels = unique(plotting_df$participant))
#plot final by participant and z score
final_plot <-
ggplot(plotting_df, aes(x = participant, y = z, label = z)) +
geom_bar(stat='identity', aes(fill = disease_status), width = .9) +
scale_fill_manual(name = 'Disease State',
labels = c('COVID-19', 'NON-COVID-19'),
values = c("disease state: COVID-19"="plum2", "disease state: non-COVID-19"="limegreen")) +
labs(title= paste("Z-scored Expression for", gene1),
y = 'Z-scored expression',
x = 'Participant') +
theme(axis.text.y = element_blank()) +
coord_flip()
return(final_plot)
}
#create 4 plots and plot together
a <- plot_diverging(clean_data, 'ABI1')
b <- plot_diverging(clean_data, 'ABHD3')
c <- plot_diverging(clean_data, 'ABHD17A')
d <- plot_diverging(clean_data, 'AAMP')
ggpubr::ggarrange(a,b,c,d, common.legend = T)
