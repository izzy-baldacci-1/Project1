group_by(disease_status) %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos <- table_data %>%
dplyr::filter('disease status' == 'disease state:COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos <- table_data %>%
dplyr::filter('disease status' == 'disease state:COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') #%>%
#apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos
cont_vars_pos <- table_data %>%
dplyr::filter('disease_status' == 'disease state:COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') #%>%
#apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state:COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') #%>%
#apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') #%>%
#apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos
# Define a function to calculate a mean or a median
contSummary <- function(x,normal = T) {
x <- as.numeric(x, na.rm = TRUE)
# Calculate mean (sd) if normally distributed (the default)
if (normal == T) {
# Calculate individual values
myMean <- round(mean(x),2)
mySD <- round(sd(x),2)
# Combine values
paste0(myMean,' (',mySD,')')
}
# Calculate median (IQR) if non-normally distributed
else {
# Calculate individual values
myMedian <- round(median(x))
myIQR <- rount(IQR(x))
#myIQR1 <- round(quantile(x,1/4),digits = 2)
#myIQR2 <- round(quantile(x,3/4),digits = 2)
# Combine values
paste0(myMedian,' [',myIQR,']')
}
}
head(table_data)
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
# Define a function to calculate a mean or a median
contSummary <- function(x,normal = T) {
x <- as.numeric(x, na.rm = TRUE)
# Calculate mean (sd) if normally distributed (the default)
if (normal == T) {
# Calculate individual values
myMean <- round(mean(x),2)
mySD <- round(sd(x),2)
# Combine values
paste0(myMean,' (',mySD,')')
}
# Calculate median (IQR) if non-normally distributed
else {
# Calculate individual values
myMedian <- round(median(x))
myIQR <- round(IQR(x))
#myIQR1 <- round(quantile(x,1/4),digits = 2)
#myIQR2 <- round(quantile(x,3/4),digits = 2)
# Combine values
paste0(myMedian,' [',myIQR,']')
}
}
head(table_data)
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos
cont_vars_pos
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos
# Define a function to calculate a mean or a median
contSummary <- function(x,normal = T) {
x <- as.numeric(x, na.rm = TRUE)
# Calculate mean (sd) if normally distributed (the default)
if (normal == T) {
# Calculate individual values
myMean <- round(mean(x),2)
mySD <- round(sd(x),2)
# Combine values
paste0(myMean,' (',mySD,')')
}
# Calculate median (IQR) if non-normally distributed
else {
# Calculate individual values
myMedian <- round(median(x))
myIQR <- round(IQR(x))
#myIQR1 <- round(quantile(x,1/4),digits = 2)
#myIQR2 <- round(quantile(x,3/4),digits = 2)
# Combine values
paste0(myMedian,' [',myIQR,']')
}
}
tail(table_data)
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
print(cont_vars_pos)
print(cont_vars_neg)
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_neg <- table_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
print(cont_vars_pos)
print(cont_vars_neg)
# Define a function to calculate a mean or a median
contSummary <- function(x,normal = T) {
x <- as.numeric(x, na.rm = TRUE)
# Calculate mean (sd) if normally distributed (the default)
if (normal == T) {
# Calculate individual values
myMean <- round(mean(x),2)
mySD <- round(sd(x),2)
# Combine values
paste0(myMean,' (',mySD,')')
}
# Calculate median (IQR) if non-normally distributed
else {
# Calculate individual values
myMedian <- round(median(x), 2)
myIQR <- round(IQR(x), 2)
#myIQR1 <- round(quantile(x,1/4),digits = 2)
#myIQR2 <- round(quantile(x,3/4),digits = 2)
# Combine values
paste0(myMedian,' [',myIQR,']')
}
}
tail(table_data)
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_neg <- table_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
print(cont_vars_pos)
print(cont_vars_neg)
print(cont_vars_pos.rows)
print(rows(cont_vars_pos))
print(cont_vars_pos[1,])
print(cont_vars_pos[1,,])
cont_vars_pos
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_neg <- table_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
print(cont_vars_pos)
print(cont_vars_neg)
# Define a function to calculate a mean or a median
contSummary <- function(x,normal = T) {
#x <- as.numeric(x, na.rm = TRUE)
# Calculate mean (sd) if normally distributed (the default)
if (normal == T) {
# Calculate individual values
myMean <- round(mean(x),2)
mySD <- round(sd(x),2)
# Combine values
paste0(myMean,' (',mySD,')')
}
# Calculate median (IQR) if non-normally distributed
else {
# Calculate individual values
myMedian <- round(median(x, na.rm = TRUE), 2)
myIQR <- round(IQR(x, na.rm = TRUE), 2)
#myIQR1 <- round(quantile(x,1/4),digits = 2)
#myIQR2 <- round(quantile(x,3/4),digits = 2)
# Combine values
paste0(myMedian,' [',myIQR,']')
}
}
tail(table_data)
tail(clean_data)
cont_vars_pos <- clean_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos <- clean_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN = 2, FUN = as.numeric(x, na.rm = TRUE)) %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos <- clean_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN = 2, FUN = function(x) {as.numeric(x, na.rm = TRUE)}) %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_neg <- clean_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_pos <- clean_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN = 2, FUN = function(x) {as.numeric(x, na.rm = TRUE)}) %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
#cont_vars_neg <- clean_data %>%
# dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
#dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
# apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
print(cont_vars_pos)
print(cont_vars_neg)
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_neg <- table_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
print(cont_vars_pos)
print(cont_vars_neg)
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_neg <- table_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
print(cont_vars_pos)
print(cont_vars_neg)
cat_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('mechanical_ventilation', 'sex', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
as.dataframe(cont_vars_pos)
as.data.frame(cont_vars_pos)
#print(cont_vars_neg)
# Define a function to calculate a mean or a median
contSummary <- function(x,normal = T) {
x <- as.numeric(x, na.rm = TRUE)
# Calculate mean (sd) if normally distributed (the default)
if (normal == T) {
# Calculate individual values
myMean <- round(mean(x),2)
mySD <- round(sd(x),2)
# Combine values
paste0(myMean,' (',mySD,')')
}
# Calculate median (IQR) if non-normally distributed
else {
# Calculate individual values
myMedian <- round(median(x, na.rm = TRUE), 2)
myIQR <- round(IQR(x), 2)
#myIQR1 <- round(quantile(x,1/4),digits = 2)
#myIQR2 <- round(quantile(x,3/4),digits = 2)
# Combine values
paste0(myMedian,' [',myIQR,']')
}
}
tail(table_data)
as.data.frame(cont_vars_pos)
print(cont_vars_neg)
as.data.frame(cont_vars_pos)
print(cont_vars_neg[0])
as.data.frame(cont_vars_pos)
print(cont_vars_neg[0].name)
as.data.frame(cont_vars_pos)
print(cont_vars_neg[0].names)
as.data.frame(cont_vars_pos)
test <- as.data.frame(cont_vars_pos)
test <- as.data.frame(cont_vars_pos)
test
test <- as.data.frame(cont_vars_pos)
test2 <- as.data.frame(cont_vars_neg)
test <- as.data.frame(cont_vars_pos)
test2 <- as.data.frame(cont_vars_neg)
test
# Define Table
table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
"COVID-Positive" = test$cont_vars_pos,
'COVID-Negative' = test2$cont_vars_neg)
# Print table using kable
tab <- kable(x = table1, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(3,4),level_of_indent = 1)
# Define Table
table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
"COVID-Positive" = test$cont_vars_pos,
'COVID-Negative' = test2$cont_vars_neg)
head(table1)
# Print table using kable
tab <- kable(x = table1, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(3,4),level_of_indent = 1)
# Define Table
table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
"COVID-Positive" = test$cont_vars_pos,
'COVID-Negative' = test2$cont_vars_neg)
head(table1)
# Print table using kable
tab <- kable(x = table1, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('Variable','Covid Positive', 'Covid Negative'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(3,4),level_of_indent = 1)
library(tidyverse)
library(knitr) # for base kable function
library(kableExtra) # for formatting
# Define Table
table1 <- data.frame('Variable' = c('Age mean (sd)','Sex n (%)',
"Female","Male", "Title4"),
"Value" = c('35 (2)','','10 (25.0)','30 (75.0)', 'hi'),
'Value2' = c(1, 2, 3, 4, 5))
# Print table using kable
tab <- kable(x = table1, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c("Variable", "n = 40", 'hi'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(3,4),level_of_indent = 1)
tab
library(tidyverse)
library(knitr) # for base kable function
library(kableExtra) # for formatting
# Define Table
table1 <- data.frame('Variable' = c('Age mean (sd)','Sex n (%)',
"Female","Male", "Title4"),
"Value" = c('35 (2)','','10 (25.0)','30 (75.0)', 'hi'),
'Value2' = c(1, 2, 3, 4, 5))
head(table1)
# Print table using kable
tab <- kable(x = table1, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c("Variable", "n = 40", 'hi'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(3,4),level_of_indent = 1)
tab
cont_vars_pos <- as.data.frame(table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)}))
cont_vars_neg <- as.data.frame(table_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)}))
cont_vars_pos <- as.data.frame(table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)}))
cont_vars_neg <- as.data.frame(table_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)}))
continuous_variables_table <- cont_vars_pos %>% dplyr::inner_join(cont_vars_neg, by = index)
continuous_variables_table <- merge(cont_vars_pos, cont_vars_neg, by= 'row.names')
continuous_variables_table <- merge(cont_vars_pos, cont_vars_neg, by= 'row.names')
continous_variables_table
continuous_variables_table <- merge(cont_vars_pos, cont_vars_neg, by= 'row.names')
continuous_variables_table
cont_vars_pos
as.data.frame(cont_vars_pos)
as.data.frame(cont_vars_pos, col_names = c('Variable', 'COVID Positive'))
as.data.frame('Covid Positive' = cont_vars_pos)
cont_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
cont_vars_neg <- table_data %>%
dplyr::filter(disease_status == 'disease state: non-COVID-19') %>%
dplyr::select('crp.mg.l.', 'ferritin.ng.ml.', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
as.data.frame(cont_vars_pos)
pos <- as.data.frame(cont_vars_pos)
neg <- as.data.frame(cont_vars_neg)
continuous_variables_table <- merge(cont_vars_pos, cont_vars_neg, by= 'row.names')
continuous_variables_table
pos <- as.data.frame(cont_vars_pos)
print(pos)
neg <- as.data.frame(cont_vars_neg)
continuous_variables_table <- merge(cont_vars_pos, cont_vars_neg, by= 'row.names', )
cvt <- continuous_variables_table %>% dyplr::rename(Variables = Row.names,
Covid.Positive = x,
Covid.Negative = y)
continuous_variables_table <- merge(cont_vars_pos, cont_vars_neg, by= 'row.names', )
cvt <- continuous_variables_table %>% dplyr::rename(Variables = Row.names,
Covid.Positive = x,
Covid.Negative = y)
cvt
# Define Table
#table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
#         "COVID-Positive" = test$cont_vars_pos,
#         'COVID-Negative' = test2$cont_vars_neg)
#head(table1)
# Print table using kable
tab <- kable(x = cvt, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('Variable','Covid Positive', 'Covid Negative'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(3,4),level_of_indent = 1)
# Define Table
#table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
#         "COVID-Positive" = test$cont_vars_pos,
#         'COVID-Negative' = test2$cont_vars_neg)
#head(table1)
# Print table using kable
tab <- kable(x = cvt, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('Variable','Covid Positive', 'Covid Negative'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(2,4),level_of_indent = 1)
# Define Table
#table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
#         "COVID-Positive" = test$cont_vars_pos,
#         'COVID-Negative' = test2$cont_vars_neg)
#head(table1)
# Print table using kable
tab <- kable(x = cvt, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('Variable','Covid Positive', 'Covid Negative'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(2,3),level_of_indent = 1)
tab
continuous_variables_table <- merge(cont_vars_pos, cont_vars_neg, by= 'row.names')
cvt <- continuous_variables_table %>% dplyr::rename(Variables = Row.names,
Covid.Positive = x,
Covid.Negative = y)
cvt$Variables <- c('CRP (mg/L) Median [IQR]', 'Ferritin (ng/mL) Median[IQR]', 'Procalitonin (ng/mL) Median[IQR]')
# Define Table
#table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
#         "COVID-Positive" = test$cont_vars_pos,
#         'COVID-Negative' = test2$cont_vars_neg)
#head(table1)
# Print table using kable
tab <- kable(x = cvt, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('Variable','Covid Positive', 'Covid Negative'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(2,3),level_of_indent = 1)
tab
# Define Table
#table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
#         "COVID-Positive" = test$cont_vars_pos,
#         'COVID-Negative' = test2$cont_vars_neg)
#head(table1)
# Print table using kable
tab <- kable(x = cvt, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('Variable','Covid Positive', 'Covid Negative'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(3,3),level_of_indent = 1)
tab
# Define Table
#table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
#         "COVID-Positive" = test$cont_vars_pos,
#         'COVID-Negative' = test2$cont_vars_neg)
#head(table1)
# Print table using kable
tab <- kable(x = cvt, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('Variable','Covid Positive', 'Covid Negative'),
align = c('l','r'),escape = T) %>%
add_indent(positions = c(4,3),level_of_indent = 1)
# Define Table
#table1 <- data.frame('Variable' = c('CRP Median (IQR)','Procalcitonin Median (IQR)', 'Ferritin Median (IQR)'),
#         "COVID-Positive" = test$cont_vars_pos,
#         'COVID-Negative' = test2$cont_vars_neg)
#head(table1)
# Print table using kable
tab <- kable(x = cvt, caption = 'Summary Table',
format = 'latex',booktabs = T,
col.names = c('Variable','Covid Positive', 'Covid Negative'),
align = c('l','r'),escape = T) #%>%
#add_indent(positions = c(3,3),level_of_indent = 1)
tab
cat_vars_pos <- table_data %>%
dplyr::filter(disease_status == 'disease state: COVID-19') %>%
dplyr::select('mechanical_ventilation', 'sex', 'procalcitonin.ng.ml..') %>%
apply(MARGIN  = 2, FUN = function(x) {contSummary(x, normal = F)})
